기본적인 시큐리티 프로그램 연습을 하기 위해 start.spring.io를 들어가 세팅을 해야한다. 
Dependencies에 Spring Web, Spring Boot DevTools, Lombok, Mysql Driver, Spring Security, Mustache, OAuth2 client, Spring Data JPA를 사용했다. 

application.properties -> application.yml
application파일은 프로그램을 실행시키고, 웹의 요청과 응답등 모든 과정에서 항상 적용되는 부분이다. 
이렇게 디펜던시 설정을 해주고 나서, 기본적으로 main/resources/templates/에 application.properties 파일이 있다. 이 파일의
확장자를 application.yml로 바꾸어 주고, 그 안에 몇가지를 입력할 것이다. 

먼저 server에 관한 내용을 보자면, port에  localhost:****에서 별 4자리 수를 입력해주면 된다. 개인의 자유이다. 
이후 servlet을 설정해주는데, 이 servlet은 요청에 따른 메서드 호출을 편하게 해주는 자바의 웹 프로그래밍 기술이다. 
이 속에 context-path, encoding을 입력해야 하는데, context-path는 /하나를 넣어준다. 
이 뜻은 받아들이는 웹 주소의 구분을 /단위로 찾아서 이동한다는 뜻이다. 

이후 encoding은 파일의 저장 형식, 파일을 보여줄 때 어떻게 보여줄 지를 결정한다. 
첫번째로 enabled는 http의 인코딩 지원 가능성을 설정해주는 것이며, 그 다음 charset은 인코딩 방식을 설정하는 것으로, UTF-8을 이용한다. 
마지막에 있는 force는 http의 요청과 응답에서 encoding이 설정된 charset을 항상 적용시키게 지키라고 하는 것이다. 

이후 spring부분을 볼 것인데, 이 때 spring상에서 적용되어야 할 부분을 작성해야 하며, 이 때 datasource를 내부에서 설정할 것이다. 
datasource는 db서버와의 연결을 해 db에서 정보를 가져오거나, 정보를 받아와 db에 넣을 수 있게 설정해주는 것이다. 
내부에 driver-class-name을 설정해준다. 이는 db에 접근할 때 사용하는 jdbc driver의 클래스명을 적는 것이다. 
다음으로 username 부분에 db에 요청하기 위한 db상의 사용자명, password는 그 사용자의 비밀번호를 넣는다. 
url에는 jdbc에서 연결할 호스트명, 포트번호, 스키마 등이 들어간다.
예시로 이 파일에 적혀있는 jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul를 보자면, 
jdbc를 통해 mysql을 이용할 것이며, 사용자는 localhost, 포트번호는 3306(로컬주소)이고, 스키마의 이름은 security이다. 
? 뒤에 있는 부분은 서버의 타임을 정해주는 것이다. 

마지막으로 jpa를 보자면, 내부에 hibernate, show-sql이 있다. 
jpa는 자바에서 기술표준으로 쓰는 인터페이스 모음이다. 이를 통해 객체 관계를 더 쉽게 매핑할 수 있고, 객체 중심으로 개발 할 수 있게 해준다. 
이 중 hibernate는 자바를 위한 객체 관계 프레임워크 이름이다. 우리가 jpa를 통해 사용하는 객체 모델을 관계형 데이터베이스와 매핑시켜준다. 
Hibernate 내부에 naming이 들어가는데 그 안에 보면 physical-strategy가 있다. 
데이터베이스를 배우다보면, 논리적 데이터 모델과 물리적 데이터 모델이 있다. 물리는 쉽게 보면 mysql에서 보는 테이블의 형태로, 이 테이블상의 이름을 만드는 방식을 설정한 것이다. 
이후 ddl-auto는 데이터베이스를 어떻게 할지를 정한다.
예시로 말하는 것이 더 쉬운데, update, create를 자주 쓰므로, 이걸 가지고 설명하자면 create는 해당 프로그램이 실행될 때 마다 테이블을 삭제후 새로 생성하는 것이고, update는 해당 데이터베이스를 가져와 그 위에 수정을 하며 계속 이용하는 것이다. 
마지막으로 show-sql은 hibernate에서 db를 이용할 때 쓰는 쿼리문(DDL데이터베이스 정의어, DML데이터베이스 조작어)을 보낼 때, 이를 우리도 볼 수 있게 해준다.

이렇게 설정이 끝났으면, Controller를 만들 것이다. 
기본적인 WEB MVC를 간단히 이해하고, controller부터 service, repository, bin이 뭔지 이해하고 있다면, GetMapping상태에서 String으로 함수를 만들어 return에 string을 하면 html파일을 보여주는 것을 알 것이다. 

이러한 방식대로 만들고, 프로그램을 실행시키면 바로 우리가 원하는 창이 아닌, /login으로 넘어간다. 이는 spring security가 기본적으로 사용자의 로그인을 요청하는 것이다. 
우리는 회원가입을 한 적이 없다. 하지만, 이를 위한 spring security의 기본 비밀번호가 있다. 콘솔을 보면,~ Using generated security password:의 뒷부분에 비밀번호가 있다. 이를 이용해 로그인 하면 다음 창으로 이동할 수 있다. 나중엔, 회원가입을 하고 이 가입된 아이디와 비밀번호를 통한 로그인도 실행시킬 것이다. 

그런데, 우리가 사용한 것은 mustache dependency이므로 .html이 아닌 .mustache이다. 
그렇다면, 일반적인 html파일이 실행되지 않는다. 실제로 실행시켜서 GetMapping에 원하는 주소를 넣고 실행시켜 들어가도 404가 뜬다. 그렇게 때문에 mustache에 대한 설정을 해줄 필요가 있다. 

그렇기 위해 WebMVCConfigurer을 implement한 Configuration을 만들어야 한다. @Configuration 어노테이션을 하는 클래스를 만들어, WebMVCConfigurer을 implement해준다. 
이후 configureViewResolver을 Override해준다. 이 때 기본적인 값을 그대로 쓰지 않고 수정해주어야 하는데, 파일의 수정된 상태를 가지고 이야기를 하자면, MustacheResolver를 가져와야 한다. 이를 통해 Mustache가 뷰를 가져올 때 이를 어떻게 가져올지, 뭘 가져올지등을 설정할 수 있다. 
MustacheResolver형 변수를 만들고, 여기에 우리가 일반적으로 html파일에 쓰는 설정들을 넣어주어야 한다. 
charset이 기본적으로 html에서 UTF-8을 썼다. 이를 마찬가지로 설정해준다. setCharset함수를 사용한다. 이를 통해 UTF-8을 이용한 인코딩을 한다.  
setContentType함수도 사용하는데, 이는 UTF-8로 인코딩을 해도 이상한 문자가 나오는, 코드 해석의 default를 맞추어 주는 것이다. 
setPrefix와 setSuffix는 묶어서 설명하자면, 파일의 이름을 알 때 앞에는 그 파일의 위치가, 뒤엔 그 파일의 확장자가 적혀있다. 
이를 우리가 파일을 넣는 주소(classpath:/templates/)와 파일에 설정된 확장자(.html)를 넣어 적용시켜 준다. 
그리고 이 MustacheResolver형 변수를 registry.viewResolver에 넣어주면 MustacheResolver도 우리가 사용하던 방식대로 작동할 수 있게 된다. 

이후 시큐리티 설정을 해주어야 하는데, 시큐리티 설정을 통해 각 계정에 권한을 부여하고, 이 권한에 맞는 사용자가 해당 페이지를 요청하는 것인지 확인하고, 권한이 있는 사용자는 보여주되, 권한이 없다면 보내지 않는 방식을 만들어야 한다. 이를 위해 /user, /manager, /admin, /login, /join, /joinProc를 컨트롤러에 만들어준다. 모두 동일한 이름의 html파일을 리턴하게 하지만, joinProc는 responsebody를 통해 "회원가입 완료"라는 글이 리턴되게 만들어둔다. 

하지만, /login은 responsebody를 써도 우리가 지정한대로가 아닌, 일반적인 로그인창으로 가진다. 이는 spring security에서 /login이라는 주소를 낚아채는 것임을 알 수 있다. 모든 주소를 입력해보면 404오류가 뜰 것이다. 각 리턴값에 따른 html파일이 없기 때문이다. 하지만 user는 manager나 admin을 들어갈 수 없게 해야한다. 이러한 SecurityConfiguration을 만들어 줘야한다. 


SecurityConfiguration 클래스를 만들었다면 이 클래스에 어노테이션을 등록해줘야 한다. Configuration과 EnableWebSecurity를 넣는데, 이전에도 Configuration을 사용했는데, 이 어노테이션을 단 클래스는 빈 설정을 담당하는 클래스가 된다. EnableWebSecurity 어노테이션의 용도는 스프링 시큐리티 필터를 스프링 필터 체인에 등록시켜주는 역할을 한다. 이를 통해 일련의 과정에서 시큐리티상 부적합한 것은 필터링해줄 수 있다. 
클래스에 WebSecurityConfigurerAdapter를 extends해준다. 이를 통해 오버라이드 해야될 함수가 있다. configure(HttpSecurity http)함수를 오버라이드 하면 그 안에 securityconfiguration을 통해 시큐리티가 어떻게 동작해야되는지 정할 수 있는 것이다. 
여기에 http.csrf().disable();를 입력하게 되는데, csrf는 사이트간 위조 요청인데 이를 disable한다. 굳이 이 위조요청 방지하는 방식을 끄는 이유는 시큐리티에 이번에 사용한 OAuth2나 다음 프로젝트에서 만든 jwt토큰을 이용한 인증정보를 포함시켜 실행되기 때문에 불필요한 csrf를 쓸 필요가 없는 것이다. 
다음에 있는 authorizeRequests를 통해 권한 요청을 하게 하며, 이를 위해 주소 요청을 낚아채야할 필요가 있다. 
이 때 antMathcers가 쓰이며, 이 함수를 통해 특정 주소를 넣어주면 그 주소가 들어올 때 권한확인 및 추가적인 조작을 하게 해준다. 
antMatchers("/user/**").authenticated()를 예시로 들면, user로 들어가면 권한이 있는지 확인한다. 즉 로그인 했는지 확인하는 것이다. 
그다음엔 .access가 authenticated대신에 들어가는데 이는 큰 따옴표 안에 해당사항이 있는 경우에만 허가할 떄 쓰인다. 
이를 통해 /user, /admin, /manager에서 어떻게 적동되어야 하는지를 정했다. 그 외의 경우를 위해
.anyRequest().permitAll();을 통해 그 외의 요청들을 다 허가하는 방식으로 설정하면 된다. 
이 상태에서 다시 /user, /manager, /admin을 들어가면 403오류가 뜬다. 이는 권한없음을 의미한다. 
대신 spring security에서 자체적으로 작동시키던 로그인창이 사라졌다. 이를 다시 만들어주기 위해
.and().formLogin().loginPage("/login");을 넣어 자체 로그인 폼을 /login주소가 들어올 때 띄워주게 할 수 있다. 

로그인 창을 만든걸 사용하게 했고, 이제 회원가입을 가능하게 해야 한다. 이를 위해 MVC중에 M, user을 만들어야한다. 회원가입을 할 때 이 model을 이용해 사용자 정보를 데이터베이스에 저장시키고 추가적인 회원들이 회원가입, 로그인을 가능하게 한다. 
이를 위해 로그인 창에 join을 링크로 달아주고, join.html을 만들어준다. 
이후 html을 작성해야 하는데, 이 때 login을 그대로 복사해 온 후, 약간의 수정을 해준다. Form 태그에 action, method를 넣어주아야 하는데, action은 "/joinProc", method는 "POST"로 적어준다. 
이제 회원가입정보를 POST로 받아와 컨트롤러에서 저장하는 작업을 명령한다. 이때 저장을 위해 Repository를 만들어준다. 
레포지토리에 extends JpaRepository<User, Integer>를 넣어준다. Extends를 하면 자동으로 IoC로 연결이 되어 불러와 사용이 가능하므로 레포지토리 어노테이션을 넣어줄 필요는 없지만, 보기 편하게 넣어주었다. 이제 컨트롤러에 Autowired로 레포지토리를 불러와 저장작업을 시켜주면 입력은 가능해진다.

여기서 문제는 암호가 암호화되지 않은 텍스트 자체로 저장이 된다는 것이다. 보안상의 이유로 이를 암호화 시켜 저장해주어야 한다. 
암호화를 시키기 위해서 SecurityConfig에 암호화시키는 함수를 만들어 Bean으로 쓸 것이다. 함수의 리턴 값은 암호화된 값이어야 하므로, BCryptPasswordEncoder형 함수로 리턴시에도 new BCryptPasswordEncoder()를 리턴한다. 이에 Bean어노테이션을 넣어 어디서든 쓸 수 있게 해 컨트롤러에서 불러온다. 이 함수를 이용해 user.getPassword를 암호화해 setPassword해주면 암호화된 값을 저장시킬 수 있다. 

이렇게 로그인 정보를 입력하는 html창과 GetMapping을 이용한 컨트롤러의 함수, 이걸 받아서 처리를 하는 Post함수를 만들었고 레포지토리를 이용해 비밀번호 암호화 및 저장까지 했다. 문제는 스프링 시큐리티에서 로그인시 이루어지는 연산을 낚아 채 가야한다. 
이를 위해 SecurityConfig에 .loginPrcessingUrl("/~~").defaultSuccessUrl("/")을 넣는다.
이는 로그인 과정시에 url주소가 무엇인지 지정하며, 로그인 완료후 화면이 어디로 갈지를 정하는 것이다. 

그런데 이렇게 로그인이 돼서 다시 "/"의 주소를 내보내기 전에, 시본적으로 스프링 시큐리티에선 세션을 만들어준다. 이걸 Security ContextHolder라고 하는데, 이 오브젝트의 타입은 Authentication이다. 이 객체에 User의 정보를 집어넣어 리턴하면 된다.
이 User의 정보는 그냥 model로 만든 User이 아닌, 시큐리티에서 주어지는 UserDetails로 매핑해서 보내주어야 한다. 

이렇게 하기 위해 우리는 PrincipalDetials라는 클래스를 만들고 여기에 implement UserDetails를 해준다. 그래야 우리가 사용하는 UserDetails관련 함수들을 클래스 내에서 사용할 수 있다. 그리고, 이 implement를 사용하기 위해 기본적으로 override해주어야 하는 함수들을 넣어준다. 

이 클래스는 기본적으로 User 라는 객체에 대해서 관리가 이루어진다. 이를 private로 불러올 필요가 있다. 또한 이 클래스의 생성자를 만들어, user를 입력받아 이를 private User형 변수에 넣어준다. 
이제 PrincipalDetails안에 있는 함수들을 살펴봐야 한다. 처음에 override된 함수를 보면 getAuthorities이다. 즉, 우리가 불러온 user의 PrincipalDetails중에 authorities를 가져온다고 말로 만들 수 있다. 개인적으로 코딩을 공부하며, 이렇게 하나의 이야기로 정리해서 생각하는 것이 더 편했던 것 같다. 이는 user의 role이지만, 함수의 리턴 타입이 일반 문자열이 아니다. Colletion<>의 타입으로 리턴을 해주어야 하는데, 이를 위해 Collection<GrantedAuthority>형 변수를 선언한다. 이를 new ArrayList로 만들어준다. ArrayList로 만들어주었기에, 여기에 user의 role을 add해주면 된다. add안에 new GrantedAuthority를 오버라이드한다.
보통 IntelliJ를 쓰면 그 안에 getAuthority 함수가 String타입으로 만들어져있다. 여기에 return user.getRole()를 해주면 이 문자열을 가지는 GrantedAuthority가 새로 생기고, 이 GrantedAuthority를 Collection에 넣어 리턴시키는 것이다. 
이렇게 권환확인을 끝낼 수 있으며, 그 아래에는 get~으로 되어있는 함수와 is~로 이루어진 함수가 있다. get함수는 return을 전부 user.get으로 해당 값을 리턴하면 된다. 그 아래에 있는 is~를 하나씩 설명해보자면, 게정 만기여부, 계정 잠김여부, 계정 패스워드 만기여부, 사용가능 여부인데 전부다 return true로 바꾸어준다. 이렇게 해야 만기되지 않고 잠기지도 않았으며 사용 가능한 계정으로 만들어줄 수 있다. 

이렇게 PrincipalDetails를 만들었는데, 이 UserDetails를 이용한 서비스를 만들어야한다. PrincipalDetails implements UserDetails였다면, PrincipalDetailService implements UserDetialsService로 해서 기본적으로 만들어져있는 UserDetails를 이용한 UserDetailsService를 implements한다. 이때 필요한 함수들도 바로 Override한다. 

이 UserDetailsService가 언제 작동되는지를 알아야 한다. UserDetailsService는 SecurityConfig에서 loginProcessUrl 함수가 작동되어 함수에 등록한 주소가 웹에서 요청됐을 때 UserDetailsService가 불러와진다. 조금 더 자세하게는 UserDetailsService의 loadUserByUsername이라는 함수가 작동된다. 

그러면 이 loadUserByUsername이 뭔지를 알아야 한다. 여기 있는 Username이 뭔지 이해를 해야한다. 일단, 함수를 오버라이드 해온 것을 살펴보면, 함수에서 문자열 username이 사용된다. 이 username의 변수명은 꼭 로그인창에서 사용자 아이디의 입력에 등록한 name과 동일해야한다. 그렇게 해야 시스템상 Username을 인식하고 가져온다. 만약 이름을 바꾸어야 한다면, SecurityConfig에 loadUserByUsername안의 변수명을 넣어주어야 한다. 예를 들어, 이름은 loginId라고 한다면, SecurityConfig에 .usernameParameter("loginId")를 넣어 유저네임 파라미터를 설정해준다. 
이제 loadUserByUsername의 기능을 구현해주어야 한다. 이 함수는 사용자의 아이디를 가지고 사용자를 찾아내는 것이다. 사용자의 Entity를 이용하기 위해 UserRepository를 오토와이어 한다. 이후, User타입의 변수에 userRepository.findByusername(username)을 넣는다. 이 때 username은 함수에 입력되는 변수이며, findByUsername은 username 문자열을 가지고 사용자를 찾는 것이다. 문제는 userRepository.findByUsername을 해도 그 값을 가져올 수 없다. 왜냐면 레포지토리에 해당 함수가 없기 때문이다. 그러므로, 이 함수를 레포지토리에 만들어줄 것이다. 

레포지토리로 와서 public으로 findByUsername함수를 만들어준다. 이 때 함수의 리턴값은 User로 한다. 그래야 UserDetailsService에서 아까 만든 User형 변수에 넣을 수 있기 때문이다. 이 함수의 세부적인 내용은 써 줄 필요가 없는데, 이는 우리가 extend한 JpaRepository가 findByUsername이라는 함수를 넣어주면 JPA query를 실행시켜주기 때문이다. 이 쿼리문이 알아서 데이터베이스에서 select문을 수행해 정보를 찾아준다. 
이렇게 레포지토리에서 검색을 하게 해주고 나서 이전에 만지던 loadUserByUsername을 마저 만들어준다. 이제 아까 만들었던 부분의 에러가 사라짐을 알 수 있다. findByUsername을 받은 User형 변수가 만약 null이라면 입력 username에 해당하는 사용자 계정이 없다는 뜻이며, null이 아니라면 사용자가 존재한다는 것이다. 만약 사용자가 존재한다면 이를 PrincipalDetails에 담아서 리턴해준다. 

이제 권한 처리에 관해서 몇가지 조정을 할 것이다. SecurityConfig에 EnableGlobalMethodSecurity(secureEnabled=true)를 어노테이션으로 넣어준다. 어떤 변화가 있는지는 컨트롤러를 통해 알 수 있다. 컨트롤러에서 주소를 입력받으면 어떻게 처리할지를 컨트롤 할 수 있다. 이 함수들에 Secured어노테이션을 넣어, 특정 권한에서만 작동되게 할 수 있다. 이러한 각 개체의 시큐리티를 설정할 수 있게 해주는 것이다. 

권한처리 및 기본적인 사이트 내의 로그인, 회원가입을 만들었다. 다음으론 구글로 로그인하기를 만들어볼 것이다. 이를 위해 구글 api를 만든다. 이후 api 서비스 중에서 oAuth동의 화면을 만들어야 한다. 애플리케이션 이름 등록 후 저장을 하면 자동으로 만들어진다. 
다음으론 사용자 인증정보를 들어가, 여기에 oAuth 클라이언트 ID 만들기를 진행한다. 웹 애플리케이션으로 만들면 되며, 이름은 편한대로 설정하면 된다. 아래에 승인된 리디렉션 URI를 설정해주어야 하는데, 여기에 http://localhost:(주소값)/login/oauth2/code/google로 적는다. 이 주소는 지금 사용하는 oAuth2 클라이언트를 사용한다면, 고정된 주소값이다. 이 때 컨트롤러는 불필요하다. 구글에서 지정된 주소상에서 요청을 수행하기 때문이다. 이렇게 하면 클라이언트 아이디와 비밀번호를 준다. 이 값은 후에 스프링부트에서 사용해야 하므로 따로 메모해둔다. 

구글 api를 만들었으면 이를 등록해주어야 한다. 처음에 만든 application.yml로 들어간다. 우리가 만드는 부분은 spring security의 부분이다. 그러므로, spring: security:의 구조로 들어갈 것이다. Spring:security:oauth2:client:registration:google로 들어가게 되는데, 내용상으로는 스프링의 기능 중 시큐리티를 설정할 것이다. 그 중에서 oauth2를 설정할 것이며, 클라이언트 등록을 하는데, 이 클라이언트는 구글 클라리언트(즉 구글 api)이다. 
이제 google: 에 client-id와 client-secret를 아까 복사해두었던 값들을 넣어주면 된다. 여기서 끝은 아니다. 구글에서 우리가 받아오는 값이 무엇인지도 설정해야 한다. 사용자 모델을 보면, 아이디와 권한, 타임스탬프는 자동으로 생기는 값들이다. 또한, 비밀번호도 임의로 만들어서 가입시킨 후, 구글로 로그인 할 때 그 비밀번호를 알아서 가져오게 하면 되는 것이다. 그렇다면 필요한 것은 username과 email이다. 이에 맞는 값을 가져오기 위해 scope를 쓴다. Google:scope:의 구조로 들어간 후, -email과 -profile을 적어두면 된다. profile인 이유는 이 때엔 구글이 가지고 있는 폼에 맞게 가져와야 하기 때문이다. 

구글 로그인을 위한 설정을 만들고, 이를 사용하기 위해선 html파일에 이 링크를 만들어야 한다. 로그인 창에 구글 로그인을 위한 a태그 하나를 만들고, 안에 href="/oauth2/authorization/google"을 넣어준다. 이 주소 또한 구글에서 정해준 주소이므로, 고정이다. 

이렇게하면 html을 통해 구글로 가서 구글에서 코드를 받아온다. 이 코드를 가지고 인증을 해야하며, 권한을 줘야한다. 이를 엑세스 토큰이라고 부른다. 그리고 사용자 정보를 가져와 저장시켜줘야 한다. 그래야 다음에 들어올 때에도 회원이 가지는 정보를 가지고 그대로 로그인 할 수 있다. 이렇게 가서 구글에서 로그인을 하면 액세스 토큰과 사용자 프로필 정보를 바로 받아온다. 
이를 위해 SecurityConfig에 추가적으로 내용을 넣는다. 
UserInfoEndpoint().userService()를 넣는다. 이 때 서비스 안에 들어가는 부분은 OAuth2UserService타입이어야 한다.
하지만 이러한 타입의 객체를 만들지 않았으므로 null로 적어두고 이후에 수정할 것이다. 이제 객체를 만들어줄 것이다. 객체의 이름은 자유이지만, 결국 OAuth2UserService임을 알 수 있게 해주는 것이 좋다. 이후 클래스에 DefaultOAuth2UserService를 extend해준다. 
서비스 객체이므로 당연하게 @Service를 넣어준다. 이 서비스 클래스를 Autowired로 SecurityConfig에서 호출해준 뒤 아까 만든 null에 넣어준다. 

이 서비스 클래스의 역할을 알아야 한다. SecurityConfiguration에서 userInfoEndpoint.userService()함수를 넣었다. userInfoEndpoint는 OAuth2로그인 성공시 사용자 정보를 가져오며, userService는 OAuth2UserService의 구현체를 등록해주는 것이다. 즉, 가져온 사용자 정보를 가지고 추가적으로 처리를 하는 기능을 명명한 것이다.
그러면 그 기능을 구현해야 한다. 이 때 loadUser이라는 함수를 Override해서 후처리를 시켜줄 수 있다. 함수를 불러오면 입력으로 OAuth2UserRequest가 있다. 이게 뭘 가지고 있는지 알아야 할 필요가 있다. ClientRegistration, AccessToken, Attribute가 있다. ClientRegistration는 서버의 기본적인 정보들이다. AccessToken은 이전에 언급한 억세스 토큰이며, Attribute는 우리가 구글에 로그인 했을 때 보이는 회원사진, 회원 이름(혹은 닉네임)등이 기재되어있다. Attribute를 자세히 살펴보면, sub, name, given_name, family_name, picture, email, email_verified, locale이 있다. 이 중에서 sub(일종의 기본키)는 앞에 google_ 를 붙여 아이디로 사용하면 된다. email또한 가지고 있는 email로 만들면 된다. 회원가입시엔 비밀번호도 만들어야 하지만, 구글 로그인을 이용하면 사용자가 직접 로그인을 하는 경우가 없기 때문에 임의로 만들어주게 하면 된다. role은 일반 사용자이므로 ROLE_USER이 될것이다. 하지만 여기서 이렇게 했을 떄 문제가 되는 부분이 있다. 관리자의 입장에서 회원들을 확인할 때, 이 사용자들이 홈페이지 자체 회원가입을 한 사람들인지, 아니면 구글이나 네이버를 통해 회원가입을 했는지 알 필요가 있다. 이를 위해 provider과 providerId라는 것을 만들었따. provider에는 OAuth2.0을 통한 다른 홈페이지의 계정으로 로그인할 때 그게 어느 홈페이지 인지 저장하고, providerId는 Attribute의 sub를 저장하는데 사용할 것이다. 이를 통해 일반 사용자와 OAuth2.0을 구분할 수 있다. 
여기서 문제는 사용자가 어느 플랫폼을 이용해 로그인했는지 알 수 없다. 이를 위해 User 모델에 provider라는 문자열 변수를 하나 추가해준다. 이를 이용해 구글로 로그인 같은 OAuth요청이 들어오면 강제 회원가입을 시켜 이 회원가입된 정보를 로그인할때 자동으로 불러오게 하는 것이다. 이를 적용시키기 위해서 applications.yml에 있는 ddl-auto를 create로 바꾼뒤 한번 실행해준다. 그래야 이 변경점이 db에 적용된다. 

이제 위에서 언급한 자동 회원가입을 구현해줘야 한다. OAuth2UserService 클래스의 loadUser함수가 Override되어있다. 이 함수는 처음에 엑세스 토큰을 가진 UserRequest가 오면 이를 다시 loadUser함수를 이용해 호출해 회원프로필을 받아올 수 있는 것이다. 이 받아온 정보들을 이용해 강제 회원가입을 진행하는 것이다. 이를 위해 loadUser함수 안에 loadUser된 프로필을 담는 OAuth2User타입의 변수를 만든다. 여기에 super.loadUser(userRequest)를 담는다. 만약 계정이 존재한다면 로그인처리를 바로 하면 되고, 존재하지 않는다면 회원가입을 진행한다. 

로그인이 제대로 되고, 데이터가 제대로 주고받아지는지 확인해 볼 필요가 있다. 이를 위해 컨트롤러에서 테스트를 하나 만들었다. 로그인을 할 땐 정보를 확인하고, 이게 적합하다면 세션을 사용자에게 준다. 사용자는 Authentication을 반환한다. 그러므로, 웹의 입장에선 Authentication가 입력으로 존재한다. 이를 받는 함수로 만든 후, 이 객체에 무엇이 있는지 볼 것이다. 기본 로그인 방식에선 Authentication 객체는 이 때 UserDetails타입이 들어간다. 이를 테스트로 출력해보면 아무 이상 없이 데이터가 온 것을 확인 할 수 있다. 또한 UserDetails타입은 @AuthenticationPrincipal 어노테이션으로 이용할 수 있다. 그런데, PrincipalDetails에 이미 UserDetails가 implement되어있어 UserDetails 대신 PrincipalDetails를 이용할 수 있다.

하지만 문제가 있다. 이 주소를 OAuth로그인을 한 상태에서 가면 실행이 제대로 되지 않는다. 이유는 OAuth로그인을 하면 OAuth2User타입으로 Authentication에 들어간다. 그러므로 PrincipalDetails타입의 변수가 들어온게 없기에 에러가 나는 것이다. 그렇다고 Oauth2로그인을 할 때 모든 것을 따로 만드는 것은 컨트롤러를 더욱 복잡하게 만든다. 
구조를 생각해보면 해결책이 나온다. UserDetails라는 원래 있는 클래스를 PrincipalDetails에 implement했다. 그렇다면 동일하게 OAuth2User를 implement하고, 이 클래스에 맞는 함수들을 조정해주면 되는 것이다. 그랬을 때,UserDetails 또는 OAuth2User가 들어왔을 때 이를 PrincipalDetails가 알맞게 받아가고 이를 컨트롤러에서 하나로 사용할 수 있게 되는 것이다. 

PrincipalDetails에 OAuth2User가 implement되면 두개의 함수가 자동으로 오버라이드 된다. getAttributes와 getName이다. 이 때 getAttributes를 리턴하기 위해 PrincipalDetails에 Map<String, Object> attributes로 맵을 만든다. 특성들을 특성의 이름과 이름에 맞는 객체들을 맵으로 만든 것이다. 그 다음에 getName함수가 있는데, attributes.get("sub")를 OAuth2방식으로 로그인한 사용자의 id를 반환할 수 있다. 
또한 현재 PrincipalDetails 생성자는 UserDetails타입에 맞게만 존재한다. 생성자를 하나 더 만들어 입력으로 User와 attributes을 같이 넣어 OAuth2User에 맞는 생성자를 만든다. 이제 로그인을 하면 OAuth2로그인을 해도 attributes에 저장을 해둘 수 있다. 

로그인을 하려면 일단 회원가입을 완성시켜야 한다. 가입을 할 때 회원 정보를 모델에 넣어 레포지토리를 통해 저장하고, 로그인 할 때 이 정보를 확인하면 된다. 그러기 위해 OAuth2UserService가 extend된 클래스를 수정해주면 된다. 여기에 필요한 변수들은 provider, providerId, email, username, password, role이다. provider는 userRequest.getClientRegistration().getClientId를 하면 구글을 통한 OAuth2로그인시의 요청에 함꼐 들어있는 구글이라는 provider를 받을 수 있다. 나머지는 원래 있던 OAuth2User타입 변수에 속해있기에 여기서 불러오면 된다. role은 ROLE_USER로 직접 만들어주면 되며, password는 BCryptPasswordEncoder를 Autowired해서 사용하면 된다. 여기서 실행을 할 때 순환참조가 발생한다. BCryptPassWordEncoder가 SecurityConfig에 있으면 SecurityConfig에서 PrincipalOAuth2UserService를 참조하고, PrincipalOAuth2UserService는 BCryptPasswordEncoder를 참조하는데 이게 SecurityConfig에 있다. 그렇다면 계속 둘이 돌며 순환이 되므로, 이를 상위로 빼주면 된다. 그렇기에 이 위치를 BasicApplication으로 빼둔다. 
이렇게 모델에 들어갈 변수들을 먼저 따로 만들어두고, 이를 이용해 회원가입대상자인지 로그인 대상자인지 구분해야 한다. 이를 위해 UserRepository를 Autowire한다. 이후 User타입으로 userRepository.findByUsername(username)한 값을 받아서 이게 null인지 확인한다. null이라면 회원가입대상이고, 아니면 로그인 대상자이다. 
이후 User타입으로 객체를 생성해주기 위해 위에 있는 변수들로 User 생성자를 만든다. 어노테이션으로 @Builder를 넣어준다. 이를 통해 각 변수명(변수값)을 해서 입력을 편하게 할 수 있다. 마지막에 .build()를 하면 된다. UserRepository에 이 User타입 객체를 save해주면 된다. null이 아닌 로그인이라면 userEntity가 이미 값을 가지고 있으므로 추가적으로 작업할 것이 없다. 이렇게 PrincipalDetails에 맞게 OAuth2USer에 대한 후처리를 끝냈다면, return을 new PrincipalDetails(User타입 변수, OAuth2User.getAttributes())로 하면 된다. PrincipalDetails가 이미 OAuth2User 타입을 가지고 있기에 문제가 없다. 뒤에 OAuth2User.getAttributes()를 넣은 이유는, PrincipalDetails에 OAuth2에 맞는 생성자에 Map<String, Object>형 변수를 추가했기 때문이다. 이 Map형 변수가 attributes이기 때문에 받을 수 있다. 
또한 User 모델에 @NoArgsConstructor을 만든다. 생성자가 없다는 에러를 방지할 수 있다.

이렇게 해서 구글로그인, 일반 로그인 모두 PrincipalDetails로 담아서 하나로 사용할 수 있게 된다.  

